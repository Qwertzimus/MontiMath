/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.math;

grammar Math extends de.monticore.NumberUnit, de.monticore.AssignmentExpressions , de.monticore.CommonExpressions,
        de.monticore.common.Common, de.monticore.lang.math.Matrix {

    MathCompilationUnit =
        ("package" QualifiedName ";")?
        (ImportStatement)* // to import later on other scripts/functions
        MathScript;

      symbol scope MathScript =
        "script" Name Expression+ "end";

    //Arithmetic expressions for matrices

    MathArithmeticMatrixLeftDivideExpression implements Expression<160> =
    	Expression "\\" Expression;

    MathArithmeticMatrixTransposeExpression implements Expression<270> =
    	Expression ".\'";

    MathArithmeticMatrixComplexTransposeExpression implements Expression<270> =
    	Expression "\'";

    MathArithmeticMatrixSolutionExpression implements Expression<260> =
    	Expression "\\\\" Expression;

    MathArithmeticMatrixEEPowExpression implements Expression<290> =
    	Expression ".^" Expression;

    MathArithmeticMatrixEEMultExpression implements Expression<280> =
    	Expression "." "*" Expression;

    MathArithmeticMatrixEERightDivideExpression implements Expression<250> =
    	Expression "./" Expression;

    MathArithmeticMatrixEELeftDivideExpression implements Expression<250> =
    	Expression ".\\" Expression;

    MathDottedNameExpression implements Expression<100> =
        Name "." Name;

    MathMatrixNameExpression implements Expression<100> =
        Name "(" MathMatrixAccessExpression ")";

//Boolean expressions
    MathTrueExpression implements Expression<10> =
    	"true";
    MathFalseExpression implements Expression<10> =
    	"false";

//for loop
    MathForLoopExpression implements Expression<10> =
    	"for" head:MathForLoopHead (MathForLoopBody)* "end";

    MathForLoopBody =
        (Expression | MathVectorExpression) ;

    MathForLoopHead =
    	Name "=" (Name | MathVectorExpression) ;

//if  and else conditions
    MathConditionalExpression implements Expression<40> =
    	MathIfExpression MathElseIfExpression* MathElseExpression? "end";

    MathConditionalExpressionShort implements Expression<40> =
    	Expression "?" trueCase:Expression+ ":" falseCase:Expression+;

    MathIfExpression  implements Expression<40> =
    	"if" condition:Expression "{" body:Expression* "}" ;

    MathElseIfExpression implements Expression<40> =
    	"elseif" condition:Expression "{" body:Expression* "}" ;

    MathElseExpression implements Expression<40> =
    	"else" "{" body:Expression* "}";

//Assignments
     AssignmentType =
        matrixProperty:Name* ElementType dim:Dimension?;

     Dimension =
         	"^" "{" (Expression || ",")+ "}";

     MathDeclarationExpression implements Expression<50> =
        type:AssignmentType Name ";";

     MathAssignmentDeclarationExpression implements Expression<50> =
        type:AssignmentType Name MathAssignmentOperator (Expression | MathVectorExpression) ";";

     MathAssignmentExpression implements Expression<50> =
        (Name | MathMatrixNameExpression | MathDottedNameExpression) MathAssignmentOperator (Expression | MathVectorExpression) ";";

     MathAssignmentOperator =
        operator:"=" | operator:"+=" | operator:"-=" | operator:"*=" | operator:"/=";

 //Element Types WholeNumberNumber="Z" Rational:"Q" Complex:"C" Boolean:"B" Natural:"N"
     ElementType implements Type, TypeArgument =
             ZQCBN |
             Ranges;

     Ranges = ZQCBN ("(" min:Expression ":" max:Expression ")" |
                     "(" min:Expression ":" step:Expression ":" max:Expression ")")
          ;

     ZQCBN = { _input.LT(1).getText().matches("Z|Q|C|B|N") }?
              Name ;

//Expression for all Numbers with units
    NumberExpression implements Expression<10> =
        NumberWithUnit;

    NameExpression implements Expression<30> =
        Name;

 }
