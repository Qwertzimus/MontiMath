/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.math;

grammar Math extends de.monticore.NumberUnit, de.monticore.AssignmentExpressions , de.monticore.CommonExpressions,
        de.monticore.common.Common {

    MathCompilationUnit =
      ("package" package:(Name || ".")+ ";")?
      (ImportStatement)* // to import later on other scripts/functions
      MathScript;

    symbol scope MathScript = 
    	"script" Name Expression+ "end";

    MathForLoopExpression implements Expression<10> = 
    	"for" head:MathForLoopHead body:Expression* "end";

    MathForLoopHead = 
    	Name "=" Expression;

    MathDeclarationExpression implements Expression<20> = 
    	type:AssignmentType Name ";";

    MathAssignmentDeclarationExpression implements Expression<110> =
    	type:AssignmentType Name MathAssignmentOperator Expression ";";

    MathAssignmentExpression implements Expression<99> = 
    	(Name | MathMatrixNameExpression | MathDottedNameExpression) MathAssignmentOperator Expression ";";
    	
    MathAssignmentOperator = 
    	operator:"=" | operator:"+=" | operator:"-=" | operator:"*=" | operator:"/=";

    MathConditionalExpression implements Expression<99> = 
    	MathIfExpression MathElseIfExpression* MathElseExpression? "end";

    MathConditionalExpressionShort implements Expression<99> = 
    	Expression "?" trueCase:Expression+ ":" falseCase:Expression+;

    MathIfExpression  implements Expression<99> = 
    	"if" condition:Expression "{" body:Expression* "}" ;

    MathElseIfExpression implements Expression<99> = 
    	"elseif" condition:Expression "{" body:Expression* "}" ;

    MathElseExpression implements Expression<99> = 
    	"else" "{" body:Expression* "}";

    Dimension = 
    	"^" "{" (Expression || ",")+ "}";

    //Expression the structure of a matrix
    
    MathDottedNameExpression implements Expression<99> = 
    	Name "." Name;

    MathMatrixNameExpression implements Expression<99> = 
    	Name "(" (MathMatrixAccessExpression | EndOperator) ")";

    // copied content of MathVectorExpression here due to bug https://sselab.de/lab2/private/trac/MontiCore/ticket/2072
    MathMatrixValueExplicitExpression implements Expression<1000> =
    	("[" (MathMatrixAccessExpression || ";")* "]") | ("[" MathVectorExpression "]") ;

    MathMatrixAccessExpression =
    	MathMatrixAccess (","? MathMatrixAccess)*; // MathMatrixAccess (("," | " ") MathMatrixAccess)*; but space is MC's default seperator and can be skipped
    	
    MathMatrixAccess = 
    	doubleDot:":" | Expression;
    	
    MathVectorExpression =
    	Expression ":" Expression (":" Expression)?;

    EndOperator = 
    	(":" "," endVecRight:MathVectorExpression)
    	| endVecLeft:MathVectorExpression ","  (":" | endVecRight:MathVectorExpression)
    	| endVec:MathVectorExpression;

   //Arithmetic expressions for matrices
    	
    MathArithmeticMatrixLeftDivideExpression implements Expression<280> = 
    	Expression "\\" Expression;

    MathArithmeticMatrixTransposeExpression implements Expression<270> =
    	Expression ".\'";

    MathArithmeticMatrixComplexTransposeExpression implements Expression<270> =
    	Expression "\'";

    MathArithmeticMatrixSolutionExpression implements Expression<260> =
    	Expression "\\\\" Expression;

    MathArithmeticMatrixEEPowExpression implements Expression<290> = 
    	Expression ".^" Expression;

    MathArithmeticMatrixEEMultExpression implements Expression<280> = 
    	Expression "." "*" Expression;

    MathArithmeticMatrixEERightDivideExpression implements Expression<280> = 
    	Expression "./" Expression;
    	
    MathArithmeticMatrixEELeftDivideExpression implements Expression<280> = 
    	Expression ".\\" Expression;
    	
   //Boolean expressions
    MathTrueExpression implements Expression<99> =
    	"true";
    MathFalseExpression implements Expression<99> = 
    	"false";

    AssignmentType =
    	matrixProperty:Name* ElementType dim:Dimension?;

    MatrixType = 
    	ElementType Dimension;

    ElementType implements Type, TypeArgument =
        ZQCBN |
        Ranges;

     Ranges = ZQCBN ("(" min:Expression ":" max:Expression ")" |
                     "(" min:Expression ":" step:Expression ":" max:Expression ")")
              Dimension
     ;

     NumberExpression implements Expression<100000> =
       NumberWithUnit;


    ZQCBN = { _input.LT(1).getText().matches("Z|Q|C|B|N") }?
         Name ;



      /*               [isWholeNumberNumber:"Z"] |
                     [isRational:"Q"] |
                     [isComplex:"C"] |
                     [isBoolean:"B"] |
                     [isNatural:"N"]; */
}
