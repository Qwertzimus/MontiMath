/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */


/// NOTE: all vectors are row vectors to be compatible to Matlab and Octave
package de.monticore.lang;

grammar Math extends de.monticore.NumberUnit, de.monticore.AssignmentExpressions , de.monticore.CommonExpressions,
        de.monticore.common.Common, de.monticore.lang.Matrix {

    MathCompilationUnit =
        ("package" package:QualifiedName ";")?
        (ImportStatement)* // to import later on other scripts/functions
        MathScript;

    interface Statement;

    MathStatements = (Statement ";")+;

    symbol scope MathScript =
        "script" Name statements:MathStatements "end";

    //Arithmetic expressions for matrices

    MathArithmeticMatrixLeftDivideExpression implements Expression<160> =
    	Expression "\\" Expression;

    MathArithmeticMatrixTransposeExpression implements Expression<270> =
    	Expression ".\'";

    MathArithmeticMatrixComplexTransposeExpression implements Expression<270> =
    	Expression "\'";

    MathArithmeticMatrixSolutionExpression implements Expression<260> =
    	Expression "\\\\" Expression;

    MathArithmeticMatrixEEPowExpression implements Expression<290> =
    	Expression ".^" Expression;

    MathArithmeticMatrixEEMultExpression implements Expression<280> =
    	Expression "." "*" Expression;

    MathArithmeticMatrixEERightDivideExpression implements Expression<250> =
    	Expression "./" Expression;

    MathArithmeticMatrixEELeftDivideExpression implements Expression<250> =
    	Expression ".\\" Expression;

    MathDottedNameExpression implements Expression<300> =
        Name "." Name;

    MathMatrixNameExpression implements Expression<300> =
        Name "(" MathMatrixAccessExpression ")";

    //Boolean expressions
    MathTrueExpression implements Expression<240> =
    	"true";
    MathFalseExpression implements Expression<240> =
    	"false";

    //for loop
    MathForLoopExpression implements Statement =
    	"for" head:MathForLoopHead body:MathStatements "end";

    MathForLoopHead =
    	Name "=" (NameExpression | Expression);

    //if  and else conditions
    MathIfStatement implements Statement =
    	MathIfExpression MathElseIfExpression* MathElseExpression? "end";

    MathIfStatementShort implements Statement =
    	Expression "?" trueCase:MathStatements ":" falseCase:MathStatements;

    MathIfExpression =
    	"if" condition:Expression body:MathStatements ;

    MathElseIfExpression =
    	"elseif" condition:Expression body:MathStatements ;

    MathElseExpression =
    	"else" body:MathStatements ;

    MathDeclarationStatement implements Statement =
        type:AssignmentType Name ";"?;

    MathAssignmentDeclarationStatement implements Statement =
        type:AssignmentType Name MathAssignmentOperator (Expression) ";"?;

    MathAssignmentStatement implements Statement =
        (Name | MathMatrixNameExpression | MathDottedNameExpression) MathAssignmentOperator (Expression) ";"?;

    MathAssignmentOperator =
        operator:"=" | operator:"+=" | operator:"-=" | operator:"*=" | operator:"/=";

    // IncSuffixExpression implements Statement;

    // DecSuffixExpression implements Statement;

    // type definitions
    Range = "(" min:Expression ":" (step:Expression ":")? max:Expression ")";

    // R^2 for vector or R^{3,4} for Matrix
    Dimension =
        "^" ("{" matrixDim:(Expression || ",")+ "}" | vecDim:Expression);

    ElementType implements Type, TypeArgument =
        Name Range? Dimension?;

    //Assignments
    AssignmentType =
        matrixProperty:Name* ElementType;

    //Expression for all Numbers with units
    NumberExpression implements Expression<291> =
        NumberWithUnit;

    NameExpression implements Expression<295> =
        Name;

    MathArithmeticPowerOfExpression implements Expression <190> =
     	leftExpression:Expression operator:"^" rightExpression:Expression;


    // override symbols - can be only done with upcoming Monticore Version 5.0.1
    // implement Statement
    IncSuffixExpression implements Expression <220>, Statement =
    	Expression "++";

    DecSuffixExpression implements Expression <220>, Statement =
    	Expression "--";

    // remove incompatible expressions
    BinaryXorExpression implements Expression <110> = "----- will not be used ---- this removes BinaryXorExpression";
}
