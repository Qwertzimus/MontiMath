package de.monticore.lang;

component grammar Optimization extends de.monticore.ExpressionsBasis {

    external AssignmentType;
    external MathForLoopHead;

    enum OptimizationType = MINIMIZATION: "minimize" | MAXIMIZATION: "maximize";

    OptimizationCompareOperator = operator:"==" | operator:"<=" | operator:">=";

    OptimizationVariableDeclarationExpression =
        type:AssignmentType?  Name;

    OptimizationSimpleConditionExpression =
        left:Expression operator:OptimizationCompareOperator right:Expression;

    OptimizationBoundsConditionExpression =
        lower:Expression "<=" expr:Expression "<=" upper:Expression;

    OptimizationConditionExpression =
        (simpleCondition:OptimizationSimpleConditionExpression | boundedCondition:OptimizationBoundsConditionExpression | forLoopCondition:OptimizationForLoopExpression);

    OptimizationForLoopExpression =
        "for" head:MathForLoopHead body:OptimizationConditionExpression+ "end";

    OptimizationExpression implements Expression<50> =
        optimizationType:OptimizationType "(" optimizationVariable:OptimizationVariableDeclarationExpression ")" objectiveFunction:Expression "subject to" constraint:OptimizationConditionExpression* "end";

}