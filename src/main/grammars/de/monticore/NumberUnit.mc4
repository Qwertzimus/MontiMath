package de.monticore;
/***************************************************************************************
 *                          NUMBERUNIT GRAMMAR
 *
 * this grammar is written by: Michael von Wenckstern
 * the grammar exports the following non-terminals:
 *      + ComplexNumber: "2 + 5i"
 *
 *      + UnitNumber: "8 km/h" or "- 7/9 kg*m*s^-2" (see JScience Unit)
 *                     the unit number does NOT allow complex numbers
 *
 *      + NumberWithUnit: is a either a complex number or a unit number or infinity
 *
 ***************************************************************************************/

grammar NumberUnit extends de.monticore.literals.Literals {
   NumberWithUnit =
      num:NumberWithInf un:Unit? |
      cn:ComplexNumber
   ;

   NumberWithInf =
     negNumber:"-"? number:NumericLiteral |
     "+"? posInf:Inf |
     "-" negInf:Inf
   ;

   // Inf = "oo"; (use Name to not generate a "oo" token which would clash with other tokens later)
   Inf =
      { (_input.LT(1).getText().equals("oo") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) }?
      Name
   ;


   ComplexNumber =
     // real:SignedNumericLiteral ("+" | negIm:"-") im:NumericLiteral "i"
     // use Name instead of i, otherwise no variable can be named i again
     (negRe:"-")? real:NumericLiteral ("+" | negIm:"-") im:NumericLiteral I
   ;

   I = { _input.LT(1).getText().equals("i") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]") }? Name;

   Unit =
       SIUnit |
       ImperialUnit |
       degCelsius:"°C" |
       degFahrenheit:"°F"
   ;

    // see https://en.wikipedia.org/wiki/Imperial_units
   /*ImperialUnit =
       "th" | // thou
       "in" | // inch
       "ft" | // foot
       "yd" | // yard
       "ch" | // chain
       "fur" | // furlong
       "ml" | // mile
       "lea" | // league
       "ftm" | // fathom
       "fl oz" | // fluid ounce --> missing zu long
       "gi" | // gill
       "pt" | // pint
       "qt" | // quart
       "gal" | // gallon
       "gr" | // grain
       "dr" | // drachm
       "oz" | // ounce
       "lb" | // pound
       "st" | // stone
       "qr" | // quarter
       "qtr" | // quarter
       "cwt" | // hundredweight
       // "t" | // imperial ton // conflict with metric tonne
       "slug" | // slug
       "\u00B0F"  // degree Fahrenheit --> move outside can be tokenized
    ;*/
    // we use Name again to avoid adding too many tokens which destroy the rules in other grammars
    ImperialUnit =
      { (_input.LT(1).getText().equals("th") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("in") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("ft") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("yd") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("ch") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("fur") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("ml") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("lea") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("ftm") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("gi") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("pt") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("qt") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("gal") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("gr") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("dr") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("oz") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("lb") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("st") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("qr") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("qtr") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("cwt") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) ||
        (_input.LT(1).getText().equals("slug") && !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]")) }?
      Name
    ;

    SIUnitBasic =
      (UnitBaseDimWithPrefix |
           OfficallyAcceptedUnit |
           deg:"°")
      ("^" /* SignedNatLiteral */ SignedIntLiteral)?
    ;

    SIUnit =
        SIUnitBasic (TimeDiv SIUnitBasic)* |
        SiUnitDimensionless
     ;

     TimeDiv =
       (isDiv:"/" | isTime:"*")
     ;

   /*  UnitBaseDimWithPrefix =
         UnitPrefix?
         SiUnitBaseDimension
     ;

      // see https://en.wikipedia.org/wiki/SI_base_unit
     SiUnitBaseDimension =
       // Base Units
       "m" | // metre
       "g" | // gramm
       "s" | // second
       "A" | // ampere
       "K" | // kelvin
       "mol" | // mole
       "cd" | // candela

      // see https://en.wikipedia.org/wiki/SI_derived_unit
      // Derived Units
      "Hz" | // hertz
      "N" | // newton
      "Pa" | // pascal
      "J" | // joule
      "W" | // watt
      "C" | // coulomb
      "V" | // volt
      "F" | // farad
      "Ω" | // ohm
      "S" | // siemens
      "Wb" | // weber
      "T" | // tesla
      "H" | // henry
      "\u00B0C" | // degree Celsius --> must be extra
      "lm" | // lumen
      "lx" | // lux
      "Bq" | // becquerel
      "Gy" | // gray
      "Sv" | // sievert
      "kat"  // katal
    ;

      // see https://en.wikipedia.org/wiki/Metric_prefix

      UnitPrefix =
        "Y" | // yotta: 10^24
        "Z" | // zetta: 10^21
        "E" | // exa: 10^18
        "P" | // peta: 10^15
        "T" | // tera: 10^12
        "G" | // giga: 10^9
        "M" | // mega: 10^6
        "K" | // kilo: 10^3
        "k" | // kilo: 10^3
        "H" | // hecto: 10^2
        "da" | // deca: 10^1
        "d" | // deci: 10^-1
        "c" | // centi: 10^-2
        "m" | // milli: 10^-3
        // "μ" | // micro: 10^-6 // ToDo: Not working because of character encoding ??
        "n" | // nano: 10^-9
        "p" | // pico: 10^-12
        "f" | // femto: 10^-15
        "a" | // atto: 10^-18
        "z" | // zepto: 10^-21
        "y"  // yocto: 10^-24
      ;

      */

      // we create UnitBaseDimWithPrefix as Name without introducing tokens
      UnitBaseDimWithPrefix =
         { !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]") &&
           _input.LT(1).getText().matches("(Y|Z|E|P|T|G|M|K|k|H|da|d|c|m|n|p|f|a|z|y)?(m|g|s|A|K|mol|cd|Hz|N|Pa|J|W|C|V|F|Ohm|S|Wb|T|H|lm|lx|Bq|Gy|Sv|kat)") }?
        Name;

     /*
      // see https://en.wikipedia.org/wiki/Non-SI_units_mentioned_in_the_SI
      OfficallyAcceptedUnit =
        "min" | // minute
        "h" | // hour
        "d" | // day --> make day to avoid collision with 7d and 7f float and double in Java type system
        "\u00B0" | // degree --> must be treated extra

        // Problems with String encoding in Literals
        // "\\'" | // minute
        // "\\"" | // second
        //

        "ha" | // hectare
        "l" | // litre
        "L" | // litre
        // "t" | // metric tonne // Deactivated because of collisions with other language
        "au" | // astronomical unit
        "AU" | // astronomical unit
        "Np" | // neper
        "B" | // bel
        "dB" | // decibel
        "eV" | // electronvolt
        "u"  // unified atomic mass unit
        // ToDo: Natural and Atomic units
      ;
      */
      OfficallyAcceptedUnit =
         { !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]") &&
            _input.LT(1).getText().matches("min|h|day|ha|l|L|t|au|Au|Np|B|B|db|eV|u") }?
          Name;

      /*
      // see https://en.wikipedia.org/wiki/SI_derived_unit
      SiUnitDimensionless =
        "deg" | // degree
        "rad" | // radian
        "sr"  // steradian
      ;
      */
      SiUnitDimensionless =
        { !_input.LT(2).getText().matches("[a-zA-Z]") && !_input.LT(-1).getText().matches("[a-zA-Z]") &&
          _input.LT(1).getText().matches("deg|rad|sr") }?
        Name;
}